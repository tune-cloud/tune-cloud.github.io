{"version":3,"sources":["components/search/SearchBar.js","components/search/MobileSearchBar.js","components/home/HomePage.js","api/ArtistApi.js","services/ArtistService.js","components/artist/ArtistPage.js","api/SongApi.js","services/SongService.js","components/search/SearchPage.js","components/error/ErrorPage.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","props","useState","artists","setArtists","history","useHistory","searchBarKeyPress","event","a","key","pauseInTyping","search","target","value","artistService","find","then","results","catch","error","console","push","text","sleep","ms","Promise","resolve","setTimeout","goToArtistPage","artist","id","name","window","location","reload","action","onSubmit","e","preventDefault","className","searchBarClassName","type","placeholder","onKeyDown","autoFocus","searchResultsClassName","map","tabIndex","onClick","onKeyPress","src","thumbnail","width","height","alt","MobileSearchBar","onFocus","HomePage","isMobile","innerWidth","ArtistApi","client","this","query","gql","ArtistService","data","ArtistPage","songs","setSongs","setArtist","loading","setLoading","innerHeight","setHeight","useEffect","params","URLSearchParams","artistId","get","songService","getSongs","words","song","index","title","word","popularity","length","addEventListener","style","color","options","layout","scale","rotations","rotationAngles","enableTooltip","SongApi","top","SongService","numberOfSongs","result","SearchPage","ErrorPage","href","App","ApolloClient","link","from","RetryLink","HttpLink","uri","cache","InMemoryCache","init","basename","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAIe,SAASA,EAAUC,GAE9B,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACMC,EAAUC,cAEVC,EAAiB,uCAAG,WAAOC,GAAP,eAAAC,EAAA,8DACJ,UAAdD,EAAME,IADY,qCACaC,EAAcH,GAD3B,mDAEZI,EAASJ,EAAMK,OAAOC,MAC5Bb,EAAMc,cAAcC,KAAKJ,GAAQK,MAAK,SAACC,GACnCd,EAAWc,MACZC,OAAM,SAACC,GACNC,QAAQD,MAAMA,GACdf,EAAQiB,KAAK,aAPC,2CAAH,sDAYjBX,EAAa,uCAAG,WAAOH,GAAP,eAAAC,EAAA,6DACZc,EAAOf,EAAMK,OAAOC,MAAQN,EAAME,IADtB,SAEZc,EAAM,KAFM,gCAGXhB,EAAMK,OAAOC,QAAUS,GAHZ,2CAAH,sDAMbC,EAAQ,SAACC,GACX,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,OAGhDI,EAAiB,SAACC,GACpBzB,EAAQiB,KAAR,2BAAiCQ,EAAOC,GAAxC,mBAAqDD,EAAOE,OAC5DC,OAAOC,SAASC,UAGpB,OACI,eAAC,WAAD,WACI,uBAAMC,OAAO,IAAIC,SAAU,SAACC,GAAD,OAAOA,EAAEC,kBAAkBC,UAAWvC,EAAMwC,mBAAvE,UACI,sBAAMD,UAAU,mBAAmBT,GAAG,eAAtC,SACI,cAAC,IAAD,MAEJ,uBAAOW,KAAK,SAASF,UAAU,eAAeG,YAAY,uBACnD,aAAW,sBAAsB,mBAAiB,eAClDC,UAAWrC,EAAmBsC,WAAS,OAIlD,oBAAIL,UAAWvC,EAAM6C,uBAArB,SAEQ3C,EAAQ4C,KAAI,SAACjB,GACT,OAAO,qBAAIU,UAAU,kBAAkBQ,SAAS,IACrCC,QAAS,kBAAIpB,EAAeC,IAC5BoB,WAAY,SAACZ,GAAD,MAAiB,UAAVA,EAAE5B,IAAkBmB,EAAeC,GAAU,MAFpE,UAGH,qBAAKqB,IAAKrB,EAAOsB,UAAWC,MAAO,GAAIC,OAAQ,GAAIC,IAAI,KAAKzB,EAAOE,OAHdF,EAAOC,YChDzE,SAASyB,IACpB,IAAMnD,EAAUC,cAChB,OACI,sBAAKkC,UAAU,mBAAf,UACI,sBAAMA,UAAU,mBAAmBT,GAAG,eAAtC,SACI,cAAC,IAAD,MAEJ,uBAAOW,KAAK,OAAOF,UAAU,eAAeG,YAAY,uBACrD,aAAW,sBAAsB,mBAAiB,eAClDc,QAAS,kBAAIpD,EAAQiB,KAAK,iBCT1B,SAASoC,EAASzD,GAC7B,IAAM0D,EAAW1B,OAAO2B,YAAc,IACtC,OACI,qBAAKpB,UAAU,MAAf,SACI,yBAAQA,UAAU,aAAlB,UACI,qBAAKW,IAAI,eAAeI,IAAI,gBAC1BI,GAAY,cAAC3D,EAAD,2BAAeC,GAAf,IAAsBwC,mBAAmB,mBAAmBK,uBAAuB,qBAChGa,GAAY,cAACH,EAAD,S,yCCRRK,E,yFAGjB,SAAYC,GACRC,KAAKD,OAASA,I,oBAGlB,SAAclD,GACV,IAAMoD,EAAQC,YAAH,qKACYrD,GAMvB,OAAOmD,KAAKD,OAAOE,MAAM,CAACA,MAAOA,Q,kDCfpBE,E,2HACjB,WAAWtD,GAAX,eAAAH,EAAA,sEAC0BoD,EAAUjD,OAAOA,GAD3C,cACUM,EADV,yBAEWA,EAAQiD,KAAKhE,SAFxB,2C,uFCEW,SAASiE,EAAWnE,GAE/B,IAKA,EAA0BC,mBAAS,IAAnC,mBAAOmE,EAAP,KAAcC,EAAd,KACA,EAA4BpE,qBAA5B,mBAAO4B,EAAP,KAAeyC,EAAf,KACA,EAA8BrE,oBAAS,GAAvC,mBAAOsE,EAAP,KAAgBC,EAAhB,KAQA,EAA4BvE,mBAAS+B,OAAOyC,YAXtB,KAWtB,mBAAOpB,EAAP,KAAeqB,EAAf,KACA,EAAgBzE,mBAAS,QAAlBmD,EAAP,oBACMhD,EAAUC,cA+BhB,OArBAsE,qBAAW,WACP,IAAMC,EAAS,IAAIC,gBAAgB7E,EAAMiC,SAAStB,QAC5CmE,EAAWF,EAAOG,IAAI,YAC5BT,EAAUM,EAAOG,IAAI,WACrB/E,EAAMgF,YAAYC,SAASH,EA5BP,KA4BkC9D,MAAK,SAACC,GACxD,IAAMiE,EAAQjE,EAAQ6B,KAAI,SAACqC,EAAMC,GAC7B,MAAO,CAAC9D,KAAM6D,EAAKE,MAAOxE,OAdTyE,EAcmCH,EAAKE,MAdlCE,EAcyCH,EAbpEE,EAAKE,OApBiB,GACR,GACA,IAqBSD,IAJH,IAACD,EAAMC,KAgB3BlB,EAASa,GACTV,GAAW,MACZtD,OAAM,SAACC,GACNC,QAAQD,MAAMA,GACdf,EAAQiB,KAAK,eAElB,CAACrB,EAAMiC,SAAStB,OAAQX,EAAMgF,YAAa5E,IAE9CuE,qBAAU,WACN3C,OAAOyD,iBAAiB,UAAU,WAC9Bf,EAAU1C,OAAOyC,YAzCH,UA2CnB,IAEC,sBAAKlC,UAAU,MAAMmD,MAAO,CAACtC,MAAOA,EAAOC,OAAQA,GAAS,cAAY,uBAAxE,UAEY,oBAAId,UAAU,gBAAd,SAA+BV,IAC/B,cAAC,IAAD,CAAa0C,QAASA,EAASoB,MAAM,SACrC,cAAC,IAAD,CAAgBT,MAAOd,EAAOwB,QA7C9B,CACZC,OAAQ,SACRC,MAAO,SACPC,UAAW,EACXC,eAAgB,CAAC,EAAG,IACpBC,eAAe,Q,IClBFC,E,yFAGjB,SAAYrC,GACRC,KAAKD,OAASA,I,sBAGlB,SAAgBiB,EAAUqB,GACtB,IAAMpC,EAAQC,YAAH,yLACWc,EAAkBqB,EACpBrB,GAKpB,OAAOhB,KAAKD,OAAOE,MAAM,CAACA,MAAOA,Q,KCfpBqC,E,+HACjB,WAAetB,EAAUuB,GAAzB,eAAA7F,EAAA,sEACyB0F,EAAQjB,SAASH,EAAUuB,GADpD,cACUC,EADV,yBAEWA,EAAOpC,KAAKE,OAFvB,2C,gECDW,SAASmC,EAAWvG,GAC/B,OACI,qBAAKuC,UAAU,cAAf,SACI,cAACxC,EAAD,2BAAeC,GAAf,IAAsBwC,mBAAmB,cAAcK,uBAAuB,iCCL3E,SAAS2D,IACpB,OACI,qBAAKjE,UAAU,MAAf,SACI,yBAAQA,UAAU,aAAlB,UACI,qBAAKW,IAAI,aAAaI,IAAI,yBAC1B,kFACA,yCAAW,mBAAGmD,KAAK,4DAAR,qCAAX,kCCkCDC,MAzBf,WACI,IAAM7C,EAAS,IAAI8C,IAAa,CAC5BC,KAAMC,YAAK,CACP,IAAIC,IACJ,IAAIC,IAAS,CAACC,IAAK,yEAEvBC,MAAO,IAAIC,MAGftD,EAAUuD,KAAKtD,GACfqC,EAAQiB,KAAKtD,GAEb,IAAM/C,EAAgB,IAAImD,EACpBe,EAAc,IAAIoB,EAExB,OACI,eAAC,IAAD,CAAYgB,SAAS,IAArB,UACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW,kBAAI,cAAC9D,EAAD,CAAU3C,cAAeA,OAC9D,cAAC,IAAD,CAAOwG,KAAK,UAAUC,UAAW,kBAAI,cAAChB,EAAD,CAAYzF,cAAeA,OAChE,cAAC,IAAD,CAAOwG,KAAK,UAAUC,UAAW,SAACvH,GAAD,OAAS,cAACmE,EAAD,aAAYa,YAAaA,GAAiBhF,OACpF,cAAC,IAAD,CAAOsH,KAAK,SAASC,UAAWf,QCvB7BgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB1G,MAAK,YAAkD,IAA/C2G,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.5aa52b5a.chunk.js","sourcesContent":["import { Search } from 'react-bootstrap-icons';\nimport {Fragment, useState} from 'react';\nimport {useHistory} from 'react-router-dom';\n\nexport default function SearchBar(props) {\n\n    const [artists, setArtists] = useState([]);\n    const history = useHistory();\n\n    const searchBarKeyPress = async (event) => {\n        if (event.key === 'Enter' || await pauseInTyping(event)) {\n            const search = event.target.value;\n            props.artistService.find(search).then((results)=>{\n                setArtists(results);\n            }).catch((error)=>{\n                console.error(error);\n                history.push('/error');\n            });\n        }\n    }\n\n    const pauseInTyping = async (event) => {\n        const text = event.target.value + event.key\n        await sleep(250);\n        return event.target.value === text;\n    }\n\n    const sleep = (ms) => {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    const goToArtistPage = (artist) => {\n        history.push(`/artist?artistId=${artist.id}&artist=${artist.name}`);\n        window.location.reload();\n    }\n\n    return (\n        <Fragment>\n            <form action='.' onSubmit={(e) => e.preventDefault()} className={props.searchBarClassName}>\n                <span className=\"input-group-text\" id=\"basic-addon1\">\n                    <Search />\n                </span>\n                <input type=\"search\" className=\"form-control\" placeholder=\"Search for an artist\"\n                       aria-label=\"Input group example\" aria-describedby=\"basic-addon1\"\n                       onKeyDown={searchBarKeyPress} autoFocus\n                />\n            </form>\n\n            <ul className={props.searchResultsClassName}>\n                {\n                    artists.map((artist)=>{\n                        return <li className=\"list-group-item\" tabIndex='0' key={artist.id}\n                                   onClick={()=>goToArtistPage(artist)}\n                                   onKeyPress={(e) => e.key === 'Enter' ? goToArtistPage(artist) : null}>\n                            <img src={artist.thumbnail} width={50} height={50} alt=''/>{artist.name}\n                        </li>\n                    })\n                }\n            </ul>\n        </Fragment>\n    );\n}\n","import {Search} from \"react-bootstrap-icons\";\nimport {useHistory} from \"react-router-dom\";\n\nexport default function MobileSearchBar() {\n    const history = useHistory();\n    return (\n        <div className=\"input-group w-75\">\n            <span className=\"input-group-text\" id=\"basic-addon1\">\n                <Search />\n            </span>\n            <input type=\"text\" className=\"form-control\" placeholder=\"Search for an artist\"\n               aria-label=\"Input group example\" aria-describedby=\"basic-addon1\"\n               onFocus={()=>history.push('/search')}\n            />\n    </div>)\n}\n","import SearchBar from \"../search/SearchBar\";\nimport MobileSearchBar from \"../search/MobileSearchBar\";\n\nexport default function HomePage(props) {\n    const isMobile = window.innerWidth <= 768;\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src='/logo192.png' alt='Tune Cloud'/>\n                {!isMobile && <SearchBar {...props} searchBarClassName='input-group w-50' searchResultsClassName='list-group w-50'/>}\n                {isMobile && <MobileSearchBar/>}\n            </header>\n        </div>\n    );\n}\n","import {gql} from \"@apollo/client\";\n\nexport default class ArtistApi {\n    static client;\n\n    static init(client) {\n        this.client = client;\n    }\n\n    static search(search) {\n        const query = gql`query {\n            artists(search: \"${search}\") {\n                id\n                name\n                thumbnail\n            }\n        }`;\n        return this.client.query({query: query});\n    }\n}\n","import ArtistApi from \"../api/ArtistApi\";\n\nexport default class ArtistService {\n    async find(search) {\n        const results = await ArtistApi.search(search);\n        return results.data.artists;\n    }\n}\n","import {useEffect, useState} from \"react\";\nimport ReactWordcloud from 'react-wordcloud';\nimport ScaleLoader from 'react-spinners/ScaleLoader';\nimport {useHistory} from 'react-router-dom';\n\nexport default function ArtistPage(props) {\n\n    const MAX_SONG_TITLE_LENGTH = 30;\n    const MIN_FONT_SIZE = 12;\n    const MAX_FONT_SIZE = 100;\n    const NUMBER_OF_SONGS = 100;\n    const HEIGHT_OFFSET = 100;\n    const [songs, setSongs] = useState([]);\n    const [artist, setArtist] = useState();\n    const [loading, setLoading] = useState(true);\n    const options = {\n        layout: 'spiral',\n        scale: 'linear',\n        rotations: 3,\n        rotationAngles: [0, 90],\n        enableTooltip: false\n    };\n    const [height, setHeight] = useState(window.innerHeight - HEIGHT_OFFSET);\n    const [width] = useState('100%');\n    const history = useHistory();\n\n    const calculateWordValue = ((word, popularity)=>{\n        if (word.length > MAX_SONG_TITLE_LENGTH) {\n            return MIN_FONT_SIZE;\n        } else {\n            return MAX_FONT_SIZE - popularity;\n        }\n    });\n\n    useEffect( ()=>{\n        const params = new URLSearchParams(props.location.search);\n        const artistId = params.get('artistId');\n        setArtist(params.get('artist'));\n        props.songService.getSongs(artistId, NUMBER_OF_SONGS).then((results)=>{\n            const words = results.map((song, index) => {\n                return {text: song.title, value: calculateWordValue(song.title, index)}\n            });\n            setSongs(words);\n            setLoading(false);\n        }).catch((error) => {\n            console.error(error);\n            history.push('/error');\n        });\n    }, [props.location.search, props.songService, history]);\n\n    useEffect(()=>{\n        window.addEventListener('resize', ()=>{\n            setHeight(window.innerHeight - HEIGHT_OFFSET);\n        });\n    }, []);\n    return(\n        <div className='App' style={{width: width, height: height}} data-testid='word-cloud-container'>\n\n                    <h1 className='artist-header'>{artist}</h1>\n                    <ScaleLoader loading={loading} color='teal'/>\n                    <ReactWordcloud words={songs} options={options}/>\n        </div>);\n};\n","import {gql} from \"@apollo/client\";\n\nexport default class SongApi {\n    static client;\n\n    static init(client) {\n        this.client = client;\n    }\n\n    static getSongs(artistId, top) {\n        const query = gql`query {\n            songs(artistId: ${artistId}, top: ${top}, filter: {\n                artists: [${artistId}]\n            }) {\n                title\n            }\n        }`;\n        return this.client.query({query: query});\n    }\n}\n","import SongApi from \"../api/SongApi\";\n\nexport default class SongService {\n    async getSongs(artistId, numberOfSongs) {\n        const result = await SongApi.getSongs(artistId, numberOfSongs);\n        return result.data.songs;\n    }\n}\n","import SearchBar from \"./SearchBar\";\n\nexport default function SearchPage(props) {\n    return (\n        <div className='search-page'>\n            <SearchBar {...props} searchBarClassName='input-group' searchResultsClassName='list-group search-results'/>\n        </div>\n    );\n}\n","export default function ErrorPage() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src='/error.png' alt='cartoon cloud crying'/>\n                <p>We're sorry, an error occurred! Please try again!</p>\n                <p>You can <a href='https://github.com/tune-cloud/tune-cloud.github.io/issues'>open an issue on Github</a> if the error persists.</p>\n            </header>\n        </div>\n    );\n};\n","import {HashRouter, Route} from 'react-router-dom';\nimport './App.css';\nimport HomePage from \"./components/home/HomePage\";\nimport ArtistApi from \"./api/ArtistApi\";\nimport {ApolloClient, HttpLink, InMemoryCache, from} from \"@apollo/client\";\nimport {RetryLink} from \"@apollo/client/link/retry\";\nimport ArtistService from \"./services/ArtistService\";\nimport ArtistPage from \"./components/artist/ArtistPage\";\nimport SongService from \"./services/SongService\";\nimport SongApi from \"./api/SongApi\";\nimport SearchPage from \"./components/search/SearchPage\";\nimport ErrorPage from \"./components/error/ErrorPage\";\n\n\n\nfunction App() {\n    const client = new ApolloClient({\n        link: from([\n            new RetryLink(),\n            new HttpLink({uri: 'https://064dd0z3t3.execute-api.us-east-1.amazonaws.com/dev/graphql'}),\n        ]),\n        cache: new InMemoryCache(),\n    });\n\n    ArtistApi.init(client);\n    SongApi.init(client);\n\n    const artistService = new ArtistService();\n    const songService = new SongService();\n\n    return (\n        <HashRouter basename='/'>\n            <Route exact path='/' component={()=><HomePage artistService={artistService} />} />\n            <Route path='/search' component={()=><SearchPage artistService={artistService} />} />\n            <Route path='/artist' component={(props)=><ArtistPage songService={songService} {...props} />} />\n            <Route path='/error' component={ErrorPage} />\n        </HashRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}