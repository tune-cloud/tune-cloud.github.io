{"version":3,"sources":["components/search/SearchBar.js","components/search/SearchPage.js","api/ArtistApi.js","services/ArtistService.js","components/artist/ArtistPage.js","api/SongApi.js","services/SongService.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","props","useState","artists","setArtists","history","useHistory","goToArtistPage","artist","push","id","name","className","type","placeholder","aria-label","aria-describedby","onKeyDown","event","key","target","value","length","search","artistService","find","then","results","catch","error","console","map","tabIndex","onClick","onKeyPress","e","SearchPage","ArtistApi","client","this","query","gql","ArtistService","a","data","ArtistPage","songs","setSongs","setArtist","useEffect","params","URLSearchParams","location","artistId","get","songService","getSongs","words","song","index","text","title","defaultSize","width","height","window","innerHeight","SongApi","top","SongService","numberOfSongs","result","App","ApolloClient","link","HttpLink","uri","cache","InMemoryCache","init","basename","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac6de908.chunk.js","sourcesContent":["import { Search } from 'react-bootstrap-icons';\nimport {Fragment, useState} from 'react';\nimport {useHistory} from 'react-router-dom';\n\nexport default function SearchBar(props) {\n\n    const [artists, setArtists] = useState([]);\n    const history = useHistory();\n\n    const searchBarKeyPress = (event) => {\n        if (event.key === 'Enter' || event.target.value.length >= 4) {\n            const search = event.target.value;\n            props.artistService.find(search).then((results)=>{\n                setArtists(results);\n            }).catch((error)=>{\n                console.error(error);\n            });\n        }\n    }\n\n    const goToArtistPage = (artist) => {\n        history.push(`/artist?artistId=${artist.id}&artist=${artist.name}`);\n    }\n\n    return (\n        <Fragment>\n            <div className=\"input-group w-50\">\n                    <span className=\"input-group-text\" id=\"basic-addon1\">\n                        <Search />\n                    </span>\n                <input type=\"text\" className=\"form-control\" placeholder=\"Search for an artist\"\n                       aria-label=\"Input group example\" aria-describedby=\"basic-addon1\"\n                       onKeyDown={searchBarKeyPress}\n                />\n            </div>\n\n            <ul className=\"list-group search-results\">\n                {\n                    artists.map((artist)=>{\n                        return <li className=\"list-group-item\" tabIndex='0' key={artist.id}\n                                   onClick={()=>goToArtistPage(artist)}\n                                   onKeyPress={(e) => e.key === 'Enter' ? goToArtistPage(artist) : null}>{artist.name}</li>\n                    })\n                }\n            </ul>\n        </Fragment>\n    );\n}\n","import SearchBar from './SearchBar';\n\nexport default function SearchPage(props) {\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <h1>Tune Cloud</h1>\n                <SearchBar {...props} />\n            </header>\n        </div>\n    );\n}\n","import {gql} from \"@apollo/client\";\n\nexport default class ArtistApi {\n    static client;\n\n    static init(client) {\n        this.client = client;\n    }\n\n    static search(search) {\n        const query = gql`query {\n            artists(search: \"${search}\") {\n                id\n                name\n            }\n        }`;\n        return this.client.query({query: query});\n    }\n}\n","import ArtistApi from \"../api/ArtistApi\";\n\nexport default class ArtistService {\n    async find(search) {\n        const results = await ArtistApi.search(search);\n        return results.data.artists;\n    }\n}\n","import {useEffect, useState} from \"react\";\nimport ReactWordcloud from 'react-wordcloud';\nimport {Resizable} from \"re-resizable\";\n\nexport default function ArtistPage(props) {\n\n    const [songs, setSongs] = useState([]);\n    const [artist, setArtist] = useState();\n\n    useEffect( ()=>{\n        const params = new URLSearchParams(props.location.search);\n        const artistId = params.get('artistId');\n        setArtist(params.get('artist'));\n        props.songService.getSongs(artistId, 100).then((results)=>{\n            const words = results.map((song, index) => {\n                return {text: song.title, value: results.length - (index * index)}\n            });\n            setSongs(words);\n        }).catch((error) => {\n            console.error(error);\n        });\n    }, [props.location.search, props.songService]);\n\n    return(\n        <div className=\"App\">\n\n            <header className=\"App-header\">\n                <h1 className='artist-header'>{artist}</h1>\n                <Resizable className='resize' defaultSize={{\n                    width: '90%',\n                    height: window.innerHeight * 0.80\n                }}>\n                    <ReactWordcloud words={songs} />\n                </Resizable>\n\n\n            </header>\n        </div>);\n};\n","import {gql} from \"@apollo/client\";\n\nexport default class SongApi {\n    static client;\n\n    static init(client) {\n        this.client = client;\n    }\n\n    static getSongs(artistId, top) {\n        const query = gql`query {\n            songs(artistId: ${artistId}, top: ${top}, filter: {\n                artists: [${artistId}]\n            }) {\n                id\n                title\n                artist {\n                    id\n                    name\n                }\n            }\n        }`;\n        return this.client.query({query: query});\n    }\n}\n","import SongApi from \"../api/SongApi\";\n\nexport default class SongService {\n    async getSongs(artistId, numberOfSongs) {\n        const result = await SongApi.getSongs(artistId, numberOfSongs);\n        return result.data.songs;\n    }\n}\n","import {HashRouter, Route} from 'react-router-dom';\nimport './App.css';\nimport SearchPage from \"./components/search/SearchPage\";\nimport ArtistApi from \"./api/ArtistApi\";\nimport {ApolloClient, HttpLink, InMemoryCache} from \"@apollo/client\";\nimport ArtistService from \"./services/ArtistService\";\nimport ArtistPage from \"./components/artist/ArtistPage\";\nimport SongService from \"./services/SongService\";\nimport SongApi from \"./api/SongApi\";\n\n\n\nfunction App() {\n    const client = new ApolloClient({\n        link: new HttpLink({uri: 'https://nbl977s1aj.execute-api.us-east-1.amazonaws.com/dev/graphql'}),\n        cache: new InMemoryCache(),\n    });\n\n    ArtistApi.init(client);\n    SongApi.init(client);\n\n    const artistService = new ArtistService();\n    const songService = new SongService();\n\n    return (\n        <HashRouter basename='/'>\n            <Route exact path='/' component={()=><SearchPage artistService={artistService} />} />\n            <Route path='/artist' component={(props)=><ArtistPage songService={songService} {...props} />} />\n        </HashRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}