{"version":3,"sources":["components/search/SearchBar.js","components/search/MobileSearchBar.js","components/home/HomePage.js","api/ArtistApi.js","services/ArtistService.js","components/artist/ArtistPage.js","api/SongApi.js","services/SongService.js","components/search/SearchPage.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","props","useState","artists","setArtists","history","useHistory","goToArtistPage","artist","push","id","name","action","onSubmit","e","preventDefault","className","searchBarClassName","type","placeholder","aria-label","aria-describedby","onKeyDown","event","key","target","value","length","search","artistService","find","then","results","catch","error","console","autoFocus","searchResultsClassName","map","tabIndex","onClick","onKeyPress","src","thumbnail","width","height","alt","MobileSearchBar","onFocus","HomePage","isMobile","window","innerWidth","ArtistApi","client","this","query","gql","ArtistService","a","data","ArtistPage","songs","setSongs","setArtist","loading","setLoading","useEffect","params","URLSearchParams","location","artistId","get","songService","getSongs","words","song","index","text","title","word","popularity","style","innerHeight","color","options","layout","scale","rotations","rotationAngles","enableTooltip","SongApi","top","SongService","numberOfSongs","result","SearchPage","App","ApolloClient","link","HttpLink","uri","cache","InMemoryCache","init","basename","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45b49ef6.chunk.js","sourcesContent":["import { Search } from 'react-bootstrap-icons';\nimport {Fragment, useState} from 'react';\nimport {useHistory} from 'react-router-dom';\n\nexport default function SearchBar(props) {\n\n    const [artists, setArtists] = useState([]);\n    const history = useHistory();\n\n    const searchBarKeyPress = (event) => {\n        if (event.key === 'Enter' || event.target.value.length >= 4) {\n            const search = event.target.value;\n            props.artistService.find(search).then((results)=>{\n                setArtists(results);\n            }).catch((error)=>{\n                console.error(error);\n            });\n        }\n    }\n\n    const goToArtistPage = (artist) => {\n        history.push(`/artist?artistId=${artist.id}&artist=${artist.name}`);\n    }\n\n    return (\n        <Fragment>\n            <form action='.' onSubmit={(e) => e.preventDefault()} className={props.searchBarClassName}>\n                <span className=\"input-group-text\" id=\"basic-addon1\">\n                    <Search />\n                </span>\n                <input type=\"search\" className=\"form-control\" placeholder=\"Search for an artist\"\n                       aria-label=\"Input group example\" aria-describedby=\"basic-addon1\"\n                       onKeyDown={searchBarKeyPress} autoFocus\n                />\n            </form>\n\n            <ul className={props.searchResultsClassName}>\n                {\n                    artists.map((artist)=>{\n                        return <li className=\"list-group-item\" tabIndex='0' key={artist.id}\n                                   onClick={()=>goToArtistPage(artist)}\n                                   onKeyPress={(e) => e.key === 'Enter' ? goToArtistPage(artist) : null}>\n                            <img src={artist.thumbnail} width={50} height={50} alt=''/>{artist.name}\n                        </li>\n                    })\n                }\n            </ul>\n        </Fragment>\n    );\n}\n","import {Search} from \"react-bootstrap-icons\";\nimport {useHistory} from \"react-router-dom\";\n\nexport default function MobileSearchBar() {\n    const history = useHistory();\n    return (\n        <div className=\"input-group w-75\">\n            <span className=\"input-group-text\" id=\"basic-addon1\">\n                <Search />\n            </span>\n            <input type=\"text\" className=\"form-control\" placeholder=\"Search for an artist\"\n               aria-label=\"Input group example\" aria-describedby=\"basic-addon1\"\n               onFocus={()=>history.push('/search')}\n            />\n    </div>)\n}\n","import SearchBar from \"../search/SearchBar\";\nimport MobileSearchBar from \"../search/MobileSearchBar\";\n\nexport default function HomePage(props) {\n    const isMobile = window.innerWidth <= 768;\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src='/logo192.png' alt='Tune Cloud'/>\n                {!isMobile && <SearchBar {...props} searchBarClassName='input-group w-50' searchResultsClassName='list-group w-50'/>}\n                {isMobile && <MobileSearchBar/>}\n            </header>\n        </div>\n    );\n}\n","import {gql} from \"@apollo/client\";\n\nexport default class ArtistApi {\n    static client;\n\n    static init(client) {\n        this.client = client;\n    }\n\n    static search(search) {\n        const query = gql`query {\n            artists(search: \"${search}\") {\n                id\n                name\n                thumbnail\n            }\n        }`;\n        return this.client.query({query: query});\n    }\n}\n","import ArtistApi from \"../api/ArtistApi\";\n\nexport default class ArtistService {\n    async find(search) {\n        const results = await ArtistApi.search(search);\n        return results.data.artists;\n    }\n}\n","import {useEffect, useState} from \"react\";\nimport ReactWordcloud from 'react-wordcloud';\nimport ScaleLoader from 'react-spinners/ScaleLoader';\n\nexport default function ArtistPage(props) {\n\n    const MAX_SONG_TITLE_LENGTH = 30;\n    const MIN_FONT_SIZE = 12;\n    const MAX_FONT_SIZE = 100;\n    const NUMBER_OF_SONGS = 100;\n    const [songs, setSongs] = useState([]);\n    const [artist, setArtist] = useState();\n    const [loading, setLoading] = useState(true);\n    const options = {\n        layout: 'spiral',\n        scale: 'linear',\n        rotations: 3,\n        rotationAngles: [0, 90],\n        enableTooltip: false\n    };\n\n    const calculateWordValue = ((word, popularity)=>{\n        if (word.length > MAX_SONG_TITLE_LENGTH) {\n            return MIN_FONT_SIZE;\n        } else {\n            return MAX_FONT_SIZE - popularity;\n        }\n    });\n\n    useEffect( ()=>{\n        const params = new URLSearchParams(props.location.search);\n        const artistId = params.get('artistId');\n        setArtist(params.get('artist'));\n        props.songService.getSongs(artistId, NUMBER_OF_SONGS).then((results)=>{\n            const words = results.map((song, index) => {\n                return {text: song.title, value: calculateWordValue(song.title, index)}\n            });\n            setSongs(words);\n            setLoading(false);\n        }).catch((error) => {\n            console.error(error);\n        });\n    }, [props.location.search, props.songService]);\n\n    return(\n        <div className='App' style={{width: '100%', height: window.innerHeight}}>\n\n                    <h1 className='artist-header'>{artist}</h1>\n                    <ScaleLoader loading={loading} color='teal'/>\n                    <ReactWordcloud words={songs} options={options}/>\n        </div>);\n};\n","import {gql} from \"@apollo/client\";\n\nexport default class SongApi {\n    static client;\n\n    static init(client) {\n        this.client = client;\n    }\n\n    static getSongs(artistId, top) {\n        const query = gql`query {\n            songs(artistId: ${artistId}, top: ${top}, filter: {\n                artists: [${artistId}]\n            }) {\n                id\n                title\n                artist {\n                    id\n                    name\n                }\n            }\n        }`;\n        return this.client.query({query: query});\n    }\n}\n","import SongApi from \"../api/SongApi\";\n\nexport default class SongService {\n    async getSongs(artistId, numberOfSongs) {\n        const result = await SongApi.getSongs(artistId, numberOfSongs);\n        return result.data.songs;\n    }\n}\n","import SearchBar from \"./SearchBar\";\n\nexport default function SearchPage(props) {\n    return (\n        <div className='search-page'>\n            <SearchBar {...props} searchBarClassName='input-group' searchResultsClassName='list-group search-results'/>\n        </div>\n    );\n}\n","import {HashRouter, Route} from 'react-router-dom';\nimport './App.css';\nimport HomePage from \"./components/home/HomePage\";\nimport ArtistApi from \"./api/ArtistApi\";\nimport {ApolloClient, HttpLink, InMemoryCache} from \"@apollo/client\";\nimport ArtistService from \"./services/ArtistService\";\nimport ArtistPage from \"./components/artist/ArtistPage\";\nimport SongService from \"./services/SongService\";\nimport SongApi from \"./api/SongApi\";\nimport SearchPage from \"./components/search/SearchPage\";\n\n\n\nfunction App() {\n    const client = new ApolloClient({\n        link: new HttpLink({uri: 'https://nbl977s1aj.execute-api.us-east-1.amazonaws.com/dev/graphql'}),\n        cache: new InMemoryCache(),\n    });\n\n    ArtistApi.init(client);\n    SongApi.init(client);\n\n    const artistService = new ArtistService();\n    const songService = new SongService();\n\n    return (\n        <HashRouter basename='/'>\n            <Route exact path='/' component={()=><HomePage artistService={artistService} />} />\n            <Route path='/search' component={()=><SearchPage artistService={artistService} />} />\n            <Route path='/artist' component={(props)=><ArtistPage songService={songService} {...props} />} />\n        </HashRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}