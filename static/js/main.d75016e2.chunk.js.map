{"version":3,"sources":["components/search/SearchBar.js","components/search/MobileSearchBar.js","components/search/SearchPage.js","api/ArtistApi.js","services/ArtistService.js","components/artist/ArtistPage.js","api/SongApi.js","services/SongService.js","components/search/SearchingPage.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","props","useState","artists","setArtists","history","useHistory","goToArtistPage","artist","push","id","name","className","searchBarClassName","type","placeholder","aria-label","aria-describedby","onKeyDown","event","key","target","value","length","search","artistService","find","then","results","catch","error","console","autoFocus","searchResultsClassName","map","tabIndex","onClick","onKeyPress","e","MobileSearchBar","onFocus","SearchPage","isMobile","window","innerWidth","ArtistApi","client","this","query","gql","ArtistService","a","data","ArtistPage","songs","setSongs","setArtist","useEffect","params","URLSearchParams","location","artistId","get","songService","getSongs","words","song","index","text","title","word","popularity","style","width","height","innerHeight","options","layout","scale","rotations","rotationAngles","enableTooltip","SongApi","top","SongService","numberOfSongs","result","SearchingPage","position","App","ApolloClient","link","HttpLink","uri","cache","InMemoryCache","init","basename","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRAIe,SAASA,EAAUC,GAE9B,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACMC,EAAUC,cAaVC,EAAiB,SAACC,GACpBH,EAAQI,KAAR,2BAAiCD,EAAOE,GAAxC,mBAAqDF,EAAOG,QAGhE,OACI,eAAC,WAAD,WACI,sBAAKC,UAAWX,EAAMY,mBAAtB,UACQ,sBAAMD,UAAU,mBAAmBF,GAAG,eAAtC,SACI,cAAC,IAAD,MAER,uBAAOI,KAAK,OAAOF,UAAU,eAAeG,YAAY,uBACjDC,aAAW,sBAAsBC,mBAAiB,eAClDC,UAvBO,SAACC,GACvB,GAAkB,UAAdA,EAAMC,KAAmBD,EAAME,OAAOC,MAAMC,QAAU,EAAG,CACzD,IAAMC,EAASL,EAAME,OAAOC,MAC5BrB,EAAMwB,cAAcC,KAAKF,GAAQG,MAAK,SAACC,GACnCxB,EAAWwB,MACZC,OAAM,SAACC,GACNC,QAAQD,MAAMA,QAiBuBE,WAAS,OAIlD,oBAAIpB,UAAWX,EAAMgC,uBAArB,SAEQ9B,EAAQ+B,KAAI,SAAC1B,GACT,OAAO,oBAAII,UAAU,kBAAkBuB,SAAS,IACrCC,QAAS,kBAAI7B,EAAeC,IAC5B6B,WAAY,SAACC,GAAD,MAAiB,UAAVA,EAAElB,IAAkBb,EAAeC,GAAU,MAFpE,SAE2EA,EAAOG,MAFhCH,EAAOE,YCpCzE,SAAS6B,IACpB,IAAMlC,EAAUC,cAChB,OACI,sBAAKM,UAAU,mBAAf,UACI,sBAAMA,UAAU,mBAAmBF,GAAG,eAAtC,SACI,cAAC,IAAD,MAEJ,uBAAOI,KAAK,OAAOF,UAAU,eAAeG,YAAY,uBACrDC,aAAW,sBAAsBC,mBAAiB,eAClDuB,QAAS,kBAAInC,EAAQI,KAAK,iBCT1B,SAASgC,EAAWxC,GAC/B,IAAMyC,EAAWC,OAAOC,YAAc,IACtC,OACI,qBAAKhC,UAAU,MAAf,SACI,yBAAQA,UAAU,aAAlB,UACI,6CACE8B,GAAY,cAAC1C,EAAD,2BAAeC,GAAf,IAAsBY,mBAAmB,mBAAmBoB,uBAAuB,qBAChGS,GAAY,cAACH,EAAD,S,yCCRRM,E,yFAGjB,SAAYC,GACRC,KAAKD,OAASA,I,oBAGlB,SAActB,GACV,IAAMwB,EAAQC,YAAH,0IACYzB,GAKvB,OAAOuB,KAAKD,OAAOE,MAAM,CAACA,MAAOA,Q,yDCdpBE,E,2HACjB,WAAW1B,GAAX,eAAA2B,EAAA,sEAC0BN,EAAUrB,OAAOA,GAD3C,cACUI,EADV,yBAEWA,EAAQwB,KAAKjD,SAFxB,2C,sECAW,SAASkD,EAAWpD,GAE/B,IAIA,EAA0BC,mBAAS,IAAnC,mBAAOoD,EAAP,KAAcC,EAAd,KACA,EAA4BrD,qBAA5B,mBAAOM,EAAP,KAAegD,EAAf,KA+BA,OAdAC,qBAAW,WACP,IAAMC,EAAS,IAAIC,gBAAgB1D,EAAM2D,SAASpC,QAC5CqC,EAAWH,EAAOI,IAAI,YAC5BN,EAAUE,EAAOI,IAAI,WACrB7D,EAAM8D,YAAYC,SAASH,EAvBP,KAuBkClC,MAAK,SAACC,GACxD,IAAMqC,EAAQrC,EAAQM,KAAI,SAACgC,EAAMC,GAC7B,MAAO,CAACC,KAAMF,EAAKG,MAAO/C,OAdTgD,EAcmCJ,EAAKG,MAdlCE,EAcyCJ,EAbpEG,EAAK/C,OAfiB,GACR,GACA,IAgBSgD,IAJH,IAACD,EAAMC,KAgB3BhB,EAASU,MACVpC,OAAM,SAACC,GACNC,QAAQD,MAAMA,QAEnB,CAAC7B,EAAM2D,SAASpC,OAAQvB,EAAM8D,cAG7B,sBAAKnD,UAAU,MAAM4D,MAAO,CAACC,MAAO,OAAQC,OAAQ/B,OAAOgC,aAA3D,UACY,oBAAI/D,UAAU,gBAAd,SAA+BJ,IAC/B,cAAC,IAAD,CAAgByD,MAAOX,EAAOsB,QAjC9B,CACZC,OAAQ,SACRC,MAAO,SACPC,UAAW,EACXC,eAAgB,CAAC,EAAG,IACpBC,eAAe,Q,ICdFC,E,yFAGjB,SAAYpC,GACRC,KAAKD,OAASA,I,sBAGlB,SAAgBe,EAAUsB,GACtB,IAAMnC,EAAQC,YAAH,4SACWY,EAAkBsB,EACpBtB,GAUpB,OAAOd,KAAKD,OAAOE,MAAM,CAACA,MAAOA,Q,KCpBpBoC,E,+HACjB,WAAevB,EAAUwB,GAAzB,eAAAlC,EAAA,sEACyB+B,EAAQlB,SAASH,EAAUwB,GADpD,cACUC,EADV,yBAEWA,EAAOlC,KAAKE,OAFvB,2C,gECDW,SAASiC,EAActF,GAClC,OACI,qBAAKuE,MAAO,CAACgB,SAAU,QAASf,MAAO,QAAvC,SACI,cAACzE,EAAD,2BAAeC,GAAf,IAAsBY,mBAAmB,cAAcoB,uBAAuB,iCC6B3EwD,MArBf,WACI,IAAM3C,EAAS,IAAI4C,IAAa,CAC5BC,KAAM,IAAIC,IAAS,CAACC,IAAK,uEACzBC,MAAO,IAAIC,MAGflD,EAAUmD,KAAKlD,GACfoC,EAAQc,KAAKlD,GAEb,IAAMrB,EAAgB,IAAIyB,EACpBa,EAAc,IAAIqB,EAExB,OACI,eAAC,IAAD,CAAYa,SAAS,IAArB,UACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW,kBAAI,cAAC3D,EAAD,CAAYhB,cAAeA,OAChE,cAAC,IAAD,CAAO0E,KAAK,UAAUC,UAAW,kBAAI,cAACb,EAAD,CAAe9D,cAAeA,OACnE,cAAC,IAAD,CAAO0E,KAAK,UAAUC,UAAW,SAACnG,GAAD,OAAS,cAACoD,EAAD,aAAYU,YAAaA,GAAiB9D,WCjBjFoG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB5E,MAAK,YAAkD,IAA/C6E,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d75016e2.chunk.js","sourcesContent":["import { Search } from 'react-bootstrap-icons';\nimport {Fragment, useState} from 'react';\nimport {useHistory} from 'react-router-dom';\n\nexport default function SearchBar(props) {\n\n    const [artists, setArtists] = useState([]);\n    const history = useHistory();\n\n    const searchBarKeyPress = (event) => {\n        if (event.key === 'Enter' || event.target.value.length >= 4) {\n            const search = event.target.value;\n            props.artistService.find(search).then((results)=>{\n                setArtists(results);\n            }).catch((error)=>{\n                console.error(error);\n            });\n        }\n    }\n\n    const goToArtistPage = (artist) => {\n        history.push(`/artist?artistId=${artist.id}&artist=${artist.name}`);\n    }\n\n    return (\n        <Fragment>\n            <div className={props.searchBarClassName}>\n                    <span className=\"input-group-text\" id=\"basic-addon1\">\n                        <Search />\n                    </span>\n                <input type=\"text\" className=\"form-control\" placeholder=\"Search for an artist\"\n                       aria-label=\"Input group example\" aria-describedby=\"basic-addon1\"\n                       onKeyDown={searchBarKeyPress} autoFocus\n                />\n            </div>\n\n            <ul className={props.searchResultsClassName}>\n                {\n                    artists.map((artist)=>{\n                        return <li className=\"list-group-item\" tabIndex='0' key={artist.id}\n                                   onClick={()=>goToArtistPage(artist)}\n                                   onKeyPress={(e) => e.key === 'Enter' ? goToArtistPage(artist) : null}>{artist.name}</li>\n                    })\n                }\n            </ul>\n        </Fragment>\n    );\n}\n","import {Search} from \"react-bootstrap-icons\";\nimport {useHistory} from \"react-router-dom\";\n\nexport default function MobileSearchBar() {\n    const history = useHistory();\n    return (\n        <div className=\"input-group w-75\">\n            <span className=\"input-group-text\" id=\"basic-addon1\">\n                <Search />\n            </span>\n            <input type=\"text\" className=\"form-control\" placeholder=\"Search for an artist\"\n               aria-label=\"Input group example\" aria-describedby=\"basic-addon1\"\n               onFocus={()=>history.push('/search')}\n            />\n    </div>)\n}\n","import SearchBar from \"./SearchBar\";\nimport MobileSearchBar from \"./MobileSearchBar\";\n\nexport default function SearchPage(props) {\n    const isMobile = window.innerWidth <= 768;\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <h1>Tune Cloud</h1>\n                {!isMobile && <SearchBar {...props} searchBarClassName='input-group w-50' searchResultsClassName='list-group w-50'/>}\n                {isMobile && <MobileSearchBar/>}\n            </header>\n        </div>\n    );\n}\n","import {gql} from \"@apollo/client\";\n\nexport default class ArtistApi {\n    static client;\n\n    static init(client) {\n        this.client = client;\n    }\n\n    static search(search) {\n        const query = gql`query {\n            artists(search: \"${search}\") {\n                id\n                name\n            }\n        }`;\n        return this.client.query({query: query});\n    }\n}\n","import ArtistApi from \"../api/ArtistApi\";\n\nexport default class ArtistService {\n    async find(search) {\n        const results = await ArtistApi.search(search);\n        return results.data.artists;\n    }\n}\n","import {useEffect, useState} from \"react\";\nimport ReactWordcloud from 'react-wordcloud';\n\nexport default function ArtistPage(props) {\n\n    const MAX_SONG_TITLE_LENGTH = 30;\n    const MIN_FONT_SIZE = 12;\n    const MAX_FONT_SIZE = 100;\n    const NUMBER_OF_SONGS = 100;\n    const [songs, setSongs] = useState([]);\n    const [artist, setArtist] = useState();\n    const options = {\n        layout: 'spiral',\n        scale: 'linear',\n        rotations: 3,\n        rotationAngles: [0, 90],\n        enableTooltip: false\n    };\n\n    const calculateWordValue = ((word, popularity)=>{\n        if (word.length > MAX_SONG_TITLE_LENGTH) {\n            return MIN_FONT_SIZE;\n        } else {\n            return MAX_FONT_SIZE - popularity;\n        }\n    });\n\n    useEffect( ()=>{\n        const params = new URLSearchParams(props.location.search);\n        const artistId = params.get('artistId');\n        setArtist(params.get('artist'));\n        props.songService.getSongs(artistId, NUMBER_OF_SONGS).then((results)=>{\n            const words = results.map((song, index) => {\n                return {text: song.title, value: calculateWordValue(song.title, index)}\n            });\n            setSongs(words);\n        }).catch((error) => {\n            console.error(error);\n        });\n    }, [props.location.search, props.songService]);\n\n    return(\n        <div className='App' style={{width: '100%', height: window.innerHeight}}>\n                    <h1 className='artist-header'>{artist}</h1>\n                    <ReactWordcloud words={songs} options={options}/>\n        </div>);\n};\n","import {gql} from \"@apollo/client\";\n\nexport default class SongApi {\n    static client;\n\n    static init(client) {\n        this.client = client;\n    }\n\n    static getSongs(artistId, top) {\n        const query = gql`query {\n            songs(artistId: ${artistId}, top: ${top}, filter: {\n                artists: [${artistId}]\n            }) {\n                id\n                title\n                artist {\n                    id\n                    name\n                }\n            }\n        }`;\n        return this.client.query({query: query});\n    }\n}\n","import SongApi from \"../api/SongApi\";\n\nexport default class SongService {\n    async getSongs(artistId, numberOfSongs) {\n        const result = await SongApi.getSongs(artistId, numberOfSongs);\n        return result.data.songs;\n    }\n}\n","import SearchBar from \"./SearchBar\";\n\nexport default function SearchingPage(props) {\n    return (\n        <div style={{position: 'fixed', width: '100%'}}>\n            <SearchBar {...props} searchBarClassName='input-group' searchResultsClassName='list-group search-results'/>\n        </div>\n    );\n}\n","import {HashRouter, Route} from 'react-router-dom';\nimport './App.css';\nimport SearchPage from \"./components/search/SearchPage\";\nimport ArtistApi from \"./api/ArtistApi\";\nimport {ApolloClient, HttpLink, InMemoryCache} from \"@apollo/client\";\nimport ArtistService from \"./services/ArtistService\";\nimport ArtistPage from \"./components/artist/ArtistPage\";\nimport SongService from \"./services/SongService\";\nimport SongApi from \"./api/SongApi\";\nimport SearchingPage from \"./components/search/SearchingPage\";\n\n\n\nfunction App() {\n    const client = new ApolloClient({\n        link: new HttpLink({uri: 'https://nbl977s1aj.execute-api.us-east-1.amazonaws.com/dev/graphql'}),\n        cache: new InMemoryCache(),\n    });\n\n    ArtistApi.init(client);\n    SongApi.init(client);\n\n    const artistService = new ArtistService();\n    const songService = new SongService();\n\n    return (\n        <HashRouter basename='/'>\n            <Route exact path='/' component={()=><SearchPage artistService={artistService} />} />\n            <Route path='/search' component={()=><SearchingPage artistService={artistService} />} />\n            <Route path='/artist' component={(props)=><ArtistPage songService={songService} {...props} />} />\n        </HashRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}